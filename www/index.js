// Generated by purs bundle 0.14.4
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";     

  exports.isNaN = isNaN;      

  exports.isFinite = isFinite;
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  exports["isNaN"] = $foreign["isNaN"];
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
  exports.eqCharImpl = refEq;  

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["reflectSymbol"] = reflectSymbol;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var eqRowNil = {
      eqRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return true;
              };
          };
      }
  };
  var eqRecord = function (dict) {
      return dict.eqRecord;
  };
  var eqRec = function (dictRowToList) {
      return function (dictEqRecord) {
          return {
              eq: eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)
          };
      };
  };
  var eqNumber = {
      eq: $foreign.eqNumberImpl
  };
  var eqInt = {
      eq: $foreign.eqIntImpl
  };
  var eqChar = {
      eq: $foreign.eqCharImpl
  };
  var eqBoolean = {
      eq: $foreign.eqBooleanImpl
  };
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return {
          eq: $foreign.eqArrayImpl(eq(dictEq))
      };
  };
  var eqRowCons = function (dictEqRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictEq) {
                  return {
                      eqRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var tail = eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var get = Record_Unsafe.unsafeGet(key);
                                  return eq(dictEq)(get(ra))(get(rb)) && tail;
                              };
                          };
                      }
                  };
              };
          };
      };
  };
  exports["eq"] = eq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqArray"] = eqArray;
  exports["eqRec"] = eqRec;
  exports["eqRowNil"] = eqRowNil;
  exports["eqRowCons"] = eqRowCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var ordNumber = {
      compare: $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqNumber;
      }
  };
  var ordInt = {
      compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqInt;
      }
  };
  var ordChar = {
      compare: $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqChar;
      }
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return function (x) {
              return function (y) {
                  return compare(dictOrd)(f(x))(f(y));
              };
          };
      };
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  exports["greaterThan"] = greaterThan;
  exports["comparing"] = comparing;
  exports["min"] = min;
  exports["max"] = max;
  exports["clamp"] = clamp;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordChar"] = ordChar;
})(PS);
(function(exports) {
  "use strict";

  // module Math

  exports.abs = Math.abs;  

  exports.cos = Math.cos;

  exports.floor = Math.floor;

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };

  exports.round = Math.round;

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;

  exports.e = Math.E;          

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["cos"] = $foreign.cos;
  exports["floor"] = $foreign.floor;
  exports["pow"] = $foreign.pow;
  exports["round"] = $foreign.round;
  exports["sin"] = $foreign.sin;
  exports["sqrt"] = $foreign.sqrt;
  exports["remainder"] = $foreign.remainder;
  exports["e"] = $foreign.e;
  exports["pi"] = $foreign.pi;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["ActivationFunction"] = $PS["ActivationFunction"] || {};
  var exports = $PS["ActivationFunction"];
  var Control_Category = $PS["Control.Category"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Number = $PS["Data.Number"];
  var Data_Ord = $PS["Data.Ord"];
  var $$Math = $PS["Math"];
  var tanh = function (x) {
      var y = ($$Math.pow($$Math.e)(x) - $$Math.pow($$Math.e)(-x)) / ($$Math.pow($$Math.e)(x) + $$Math.pow($$Math.e)(-x));
      var $1 = Data_Number["isNaN"](y);
      if ($1) {
          return 0.0;
      };
      return y;
  };
  var sigmoid = function (x) {
      return 1.0 / (1.0 + $$Math.pow($$Math.e)(-x));
  };
  var swish = function (x) {
      return x * sigmoid(x);
  };
  var reLU = Data_Ord.max(Data_Ord.ordNumber)(0.0);
  var linear = Control_Category.identity(Control_Category.categoryFn);
  var leakyReLU = function (x) {
      return Data_Ord.max(Data_Ord.ordNumber)(0.1 * x)(x);
  };
  var l = 1.0507;
  var geLU = function (x) {
      var o = 4.4715e-2 * $$Math.pow(x)(3.0);
      return 0.5 * x * (1.0 + tanh($$Math.sqrt(2.0 / $$Math.pi) * (x + o)));
  };
  var binaryStep = function (x) {
      if (x < 0.0) {
          return 0.0;
      };
      if (Data_Boolean.otherwise) {
          return 1.0;
      };
      throw new Error("Failed pattern match at ActivationFunction (line 42, column 1 - line 42, column 31): " + [ x.constructor.name ]);
  };
  var a = 1.6733;
  var seLU = function (x) {
      if (x >= 0.0) {
          return l * x;
      };
      if (Data_Boolean.otherwise) {
          return l * a * ($$Math.pow($$Math.e)(x) - 1.0);
      };
      throw new Error("Failed pattern match at ActivationFunction (line 78, column 1 - line 78, column 25): " + [ x.constructor.name ]);
  };
  var activationFunctions = [ linear, binaryStep, sigmoid, tanh, reLU, leakyReLU, swish, geLU, seLU ];
  exports["activationFunctions"] = activationFunctions;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["apply"] = apply;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorArray = {
      map: $foreign.arrayMap
  };
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var applyArray = {
      apply: $foreign.arrayApply,
      Functor0: function () {
          return Data_Functor.functorArray;
      }
  };
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var applicativeArray = {
      pure: function (x) {
          return [ x ];
      },
      Apply0: function () {
          return Control_Apply.applyArray;
      }
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["applicativeArray"] = applicativeArray;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];          
  var discard = function (dict) {
      return dict.discard;
  };
  var bindArray = {
      bind: $foreign.arrayBind,
      Apply0: function () {
          return Control_Apply.applyArray;
      }
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var discardUnit = {
      discard: function (dictBind) {
          return bind(dictBind);
      }
  };
  exports["bind"] = bind;
  exports["discard"] = discard;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortByImpl = (function () {
    function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {
      var mid;
      var i;
      var j;
      var k;
      var x;
      var y;
      var c;

      mid = from + ((to - from) >> 1);
      if (mid - from > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);
      if (to - mid > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);

      i = from;
      j = mid;
      k = from;
      while (i < mid && j < to) {
        x = xs2[i];
        y = xs2[j];
        c = fromOrdering(compare(x)(y));
        if (c > 0) {
          xs1[k++] = y;
          ++j;
        }
        else {
          xs1[k++] = x;
          ++i;
        }
      }
      while (i < mid) {
        xs1[k++] = xs2[i++];
      }
      while (j < to) {
        xs1[k++] = xs2[j++];
      }
    }

    return function (compare) {
      return function (fromOrdering) {
        return function (xs) {
          var out;

          if (xs.length < 2) return xs;

          out = xs.slice(0);
          mergeFromTo(compare, fromOrdering, out, xs.slice(0), 0, xs.length);

          return out;
        };
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var functorMaybe = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Just) {
                  return new Just(v(v1.value0));
              };
              return Nothing.value;
          };
      }
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return Data_Functor.map(functorMaybe)(v.value0)(v1);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  var bindMaybe = {
      bind: function (v) {
          return function (v1) {
              if (v instanceof Just) {
                  return v1(v.value0);
              };
              if (v instanceof Nothing) {
                  return Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Apply0: function () {
          return applyMaybe;
      }
  };
  var applicativeMaybe = {
      pure: Just.create,
      Apply0: function () {
          return applyMaybe;
      }
  };
  var altMaybe = {
      alt: function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              return v;
          };
      },
      Functor0: function () {
          return functorMaybe;
      }
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var semigroupString = {
      append: $foreign.concatString
  };
  var semigroupArray = {
      append: $foreign.concatArray
  };
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var monoidString = {
      mempty: "",
      Semigroup0: function () {
          return Data_Semigroup.semigroupString;
      }
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var foldableMaybe = {
      foldr: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0)(z);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldl: function (v) {
          return function (z) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return z;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(z)(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return v(v1.value0);
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      }
  };
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = {
      foldr: $foreign.foldrArray,
      foldl: $foreign.foldlArray,
      foldMap: function (dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
      }
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["fold"] = fold;
  exports["sequence_"] = sequence_;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var traverse = function (dict) {
      return dict.traverse;
  };
  var traversableMaybe = {
      traverse: function (dictApplicative) {
          return function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v(v1.value0));
                  };
                  throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      },
      sequence: function (dictApplicative) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
              };
              if (v instanceof Data_Maybe.Just) {
                  return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Maybe.Just.create)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [ v.constructor.name ]);
          };
      },
      Functor0: function () {
          return Data_Maybe.functorMaybe;
      },
      Foldable1: function () {
          return Data_Foldable.foldableMaybe;
      }
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = {
      traverse: function (dictApplicative) {
          return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
      },
      sequence: function (dictApplicative) {
          return sequenceDefault(traversableArray)(dictApplicative);
      },
      Functor0: function () {
          return Data_Functor.functorArray;
      },
      Foldable1: function () {
          return Data_Foldable.foldableArray;
      }
  };
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["traversableArray"] = traversableArray;
  exports["traversableMaybe"] = traversableMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Traversable = $PS["Data.Traversable"];              
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  };
  var take = function (n) {
      return function (xs) {
          var $67 = n < 1;
          if ($67) {
              return [  ];
          };
          return $foreign.slice(0)(n)(xs);
      };
  }; 
  var splitAt = function (i) {
      return function (xs) {
          if (i <= 0) {
              return {
                  before: [  ],
                  after: xs
              };
          };
          return {
              before: $foreign.slice(0)(i)(xs),
              after: $foreign.slice(i)($foreign.length(xs))(xs)
          };
      };
  };
  var sortBy = function (comp) {
      return $foreign.sortByImpl(comp)(function (v) {
          if (v instanceof Data_Ordering.GT) {
              return 1;
          };
          if (v instanceof Data_Ordering.EQ) {
              return 0;
          };
          if (v instanceof Data_Ordering.LT) {
              return -1 | 0;
          };
          throw new Error("Failed pattern match at Data.Array (line 831, column 31 - line 834, column 11): " + [ v.constructor.name ]);
      });
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var head = function (xs) {
      return index(xs)(0);
  };                                                           
  var foldl = Data_Foldable.foldl(Data_Foldable.foldableArray);
  var fold = function (dictMonoid) {
      return Data_Foldable.fold(Data_Foldable.foldableArray)(dictMonoid);
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var find = function (f) {
      return function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(unsafeIndex()(xs))(findIndex(f)(xs));
      };
  };
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap((function () {
          var $109 = Data_Maybe.maybe([  ])(singleton);
          return function ($110) {
              return $109(f($110));
          };
      })());
  };
  exports["head"] = head;
  exports["index"] = index;
  exports["find"] = find;
  exports["updateAt"] = updateAt;
  exports["splitAt"] = splitAt;
  exports["mapMaybe"] = mapMaybe;
  exports["foldl"] = foldl;
  exports["fold"] = fold;
  exports["sortWith"] = sortWith;
  exports["take"] = take;
  exports["delete"] = $$delete;
  exports["zipWithA"] = zipWithA;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["slice"] = $foreign.slice;
  exports["zipWith"] = $foreign.zipWith;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];                  
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.random = Math.random;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };

  exports.toStringAs = function (radix) {
    return function (i) {
      return i.toString(radix);
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var top = function (dict) {
      return dict.top;
  };
  var boundedInt = {
      top: $foreign.topInt,
      bottom: $foreign.bottomInt,
      Ord0: function () {
          return Data_Ord.ordInt;
      }
  };
  var boundedChar = {
      top: $foreign.topChar,
      bottom: $foreign.bottomChar,
      Ord0: function () {
          return Data_Ord.ordChar;
      }
  };
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];
  var hexadecimal = 16;
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["floor"] = floor;
  exports["round"] = round;
  exports["fromString"] = fromString;
  exports["hexadecimal"] = hexadecimal;
  exports["toNumber"] = $foreign.toNumber;
  exports["toStringAs"] = $foreign.toStringAs;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Random"] = $PS["Effect.Random"] || {};
  var exports = $PS["Effect.Random"];
  var $foreign = $PS["Effect.Random"];
  var Data_Int = $PS["Data.Int"];            
  var randomRange = function (min) {
      return function (max) {
          return function __do() {
              var n = $foreign.random();
              return n * (max - min) + min;
          };
      };
  };
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var n = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * n + Data_Int.toNumber(low);
              return Data_Int.floor(asNumber);
          };
      };
  };
  exports["randomInt"] = randomInt;
  exports["randomRange"] = randomRange;
  exports["random"] = $foreign.random;
})(PS);
(function(exports) {
  

  const nanoid = require('nanoid')

  exports.customAlphabetImpl = function(alphabet, idLength ){
     return nanoid.customAlphabet(alphabet, idLength)()
  }
})(PS["FFI.NanoID"] = PS["FFI.NanoID"] || {});
(function(exports) {
  "use strict";

  exports.runEffectFn2 = function runEffectFn2(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Uncurried"] = $PS["Effect.Uncurried"] || {};
  var exports = $PS["Effect.Uncurried"];
  var $foreign = $PS["Effect.Uncurried"];
  exports["runEffectFn2"] = $foreign.runEffectFn2;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["FFI.NanoID"] = $PS["FFI.NanoID"] || {};
  var exports = $PS["FFI.NanoID"];
  var $foreign = $PS["FFI.NanoID"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];                
  var customAlphabet = Effect_Uncurried.runEffectFn2($foreign.customAlphabetImpl);
  exports["customAlphabet"] = customAlphabet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Brains.Genome"] = $PS["Brains.Genome"] || {};
  var exports = $PS["Brains.Genome"];
  var ActivationFunction = $PS["ActivationFunction"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect = $PS["Effect"];
  var Effect_Random = $PS["Effect.Random"];
  var FFI_NanoID = $PS["FFI.NanoID"];                
  var Gene = (function () {
      function Gene(value0) {
          this.value0 = value0;
      };
      Gene.create = function (value0) {
          return new Gene(value0);
      };
      return Gene;
  })();
  var genome = function (g) {
      var ids = Control_Bind.bind(Control_Bind.bindArray)(g)(function (l) {
          return Control_Bind.bind(Control_Bind.bindArray)(l)(function (v) {
              return Control_Applicative.pure(Control_Applicative.applicativeArray)(v.value0.id);
          });
      });
      return Data_Array.fold(Data_Monoid.monoidString)(ids);
  };
  var geneIdLength = 16;
  var geneAlphabet = "0123456789abcdefghijklmnopqrstuvwxyz-ABCDEFGHIJKLMNOPQRSTUVWXYZ.";
  var gene = function (size) {
      return function __do() {
          var l = Effect_Random.randomInt(1)(size)();
          var generate = Effect_Random.randomRange(0.0)(1.0);
          var weights = Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(l)(generate))(Data_Array.replicate(size - l | 0)(Control_Applicative.pure(Effect.applicativeEffect)(0.0))))();
          var bias = generate();
          var i = Effect_Random.randomInt(0)(Data_Array.length(ActivationFunction.activationFunctions) - 1 | 0)();
          var disabled = Data_Functor.map(Effect.functorEffect)(Data_Ord.greaterThan(Data_Ord.ordNumber)(0.0))(generate)();
          var id = FFI_NanoID.customAlphabet(geneAlphabet)(geneIdLength)();
          return new Gene({
              weights: weights,
              bias: bias,
              activationFn: i,
              disabled: disabled,
              id: id
          });
      };
  };
  var layer = function (size) {
      return Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Data_Array.replicate(size)(gene(size)));
  };
  var network = function (nLayers) {
      var $17 = Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect);
      var $18 = Data_Array.replicate(nLayers);
      return function ($19) {
          return $17($18(layer($19)));
      };
  };
  var eqGene = {
      eq: function (v) {
          return function (v1) {
              return v.value0.id === v1.value0.id;
          };
      }
  };
  exports["Gene"] = Gene;
  exports["geneAlphabet"] = geneAlphabet;
  exports["geneIdLength"] = geneIdLength;
  exports["genome"] = genome;
  exports["network"] = network;
  exports["eqGene"] = eqGene;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.Reader.Class"] = $PS["Control.Monad.Reader.Class"] || {};
  var exports = $PS["Control.Monad.Reader.Class"];
  var ask = function (dict) {
      return dict.ask;
  };
  exports["ask"] = ask;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.Reader.Trans"] = $PS["Control.Monad.Reader.Trans"] || {};
  var exports = $PS["Control.Monad.Reader.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var ReaderT = function (x) {
      return x;
  };
  var runReaderT = function (v) {
      return v;
  };
  var monadTransReaderT = {
      lift: function (dictMonad) {
          return function ($64) {
              return ReaderT(Data_Function["const"]($64));
          };
      }
  };
  var mapReaderT = function (f) {
      return function (v) {
          return function ($65) {
              return f(v($65));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return {
          map: (function () {
              var $66 = Data_Functor.map(dictFunctor);
              return function ($67) {
                  return mapReaderT($66($67));
              };
          })()
      };
  };
  var applyReaderT = function (dictApply) {
      return {
          apply: function (v) {
              return function (v1) {
                  return function (r) {
                      return Control_Apply.apply(dictApply)(v(r))(v1(r));
                  };
              };
          },
          Functor0: function () {
              return functorReaderT(dictApply.Functor0());
          }
      };
  };
  var bindReaderT = function (dictBind) {
      return {
          bind: function (v) {
              return function (k) {
                  return function (r) {
                      return Control_Bind.bind(dictBind)(v(r))(function (a) {
                          var v1 = k(a);
                          return v1(r);
                      });
                  };
              };
          },
          Apply0: function () {
              return applyReaderT(dictBind.Apply0());
          }
      };
  };
  var applicativeReaderT = function (dictApplicative) {
      return {
          pure: (function () {
              var $71 = Control_Applicative.pure(dictApplicative);
              return function ($72) {
                  return ReaderT(Data_Function["const"]($71($72)));
              };
          })(),
          Apply0: function () {
              return applyReaderT(dictApplicative.Apply0());
          }
      };
  };
  var monadReaderT = function (dictMonad) {
      return {
          Applicative0: function () {
              return applicativeReaderT(dictMonad.Applicative0());
          },
          Bind1: function () {
              return bindReaderT(dictMonad.Bind1());
          }
      };
  };
  var monadAskReaderT = function (dictMonad) {
      return {
          ask: Control_Applicative.pure(dictMonad.Applicative0()),
          Monad0: function () {
              return monadReaderT(dictMonad);
          }
      };
  };
  exports["runReaderT"] = runReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadAskReaderT"] = monadAskReaderT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Array.NonEmpty"] = $PS["Data.Array.NonEmpty"] || {};
  var exports = $PS["Data.Array.NonEmpty"];
  var Data_Array = $PS["Data.Array"];
  var Data_Maybe = $PS["Data.Maybe"];                              
  var toArray = function (v) {
      return v;
  };
  var adaptMaybe = function (f) {
      var $75 = Data_Maybe.fromJust();
      return function ($76) {
          return $75(f(toArray($76)));
      };
  };
  var head = adaptMaybe(Data_Array.head);    
  var adaptAny = function (f) {
      return function ($78) {
          return f(toArray($78));
      };
  };                                     
  var length = adaptAny(Data_Array.length);
  exports["toArray"] = toArray;
  exports["length"] = length;
  exports["head"] = head;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Array.NonEmpty.Internal"] = $PS["Data.Array.NonEmpty.Internal"] || {};
  var exports = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Functor = $PS["Data.Functor"];                        
  var NonEmptyArray = function (x) {
      return x;
  };                                                                              
  var functorNonEmptyArray = Data_Functor.functorArray;
  exports["NonEmptyArray"] = NonEmptyArray;
  exports["functorNonEmptyArray"] = functorNonEmptyArray;
})(PS);
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var semiringNumber = {
      add: $foreign.numAdd,
      zero: 0.0,
      mul: $foreign.numMul,
      one: 1.0
  };
  var semiringInt = {
      add: $foreign.intAdd,
      zero: 0,
      mul: $foreign.intMul,
      one: 1
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["add"] = add;
  exports["mul"] = mul;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var showInt = {
      show: $foreign.showIntImpl
  };
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return {
          show: $foreign.showArrayImpl(show(dictShow))
      };
  };
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showArray"] = showArray;
})(PS);
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Matrix"] = $PS["Data.Matrix"] || {};
  var exports = $PS["Data.Matrix"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Partial = $PS["Partial"];                
  var Matrix = (function () {
      function Matrix(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Matrix.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Matrix(value0, value1, value2);
              };
          };
      };
      return Matrix;
  })();
  var vadd = function (dictSemiring) {
      return function (xs) {
          return function (ys) {
              if (Data_Array.length(xs) !== Data_Array.length(ys)) {
                  return [  ];
              };
              if (Data_Boolean.otherwise) {
                  return Data_Array.zipWith(Data_Semiring.add(dictSemiring))(xs)(ys);
              };
              throw new Error("Failed pattern match at Data.Matrix (line 52, column 1 - line 52, column 60): " + [ xs.constructor.name, ys.constructor.name ]);
          };
      };
  };
  var row = function (r) {
      return function (v) {
          var i = (function () {
              var $44 = r >= 0 && r < v.value0;
              if ($44) {
                  return r * v.value1 | 0;
              };
              return 0;
          })();
          var j = (function () {
              var $45 = r >= 0 && r < v.value0;
              if ($45) {
                  return i + v.value1 | 0;
              };
              return 0;
          })();
          return Data_Array.slice(i)(j)(v.value2);
      };
  };
  var nrows = function (v) {
      return v.value0;
  };
  var rows = function (mat) {
      return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(0)(nrows(mat) - 1 | 0))(function (i) {
          return Control_Applicative.pure(Control_Applicative.applicativeArray)(row(i)(mat));
      });
  };
  var ncols = function (v) {
      return v.value1;
  };
  var madd = function (dictSemiring) {
      return function (dictMonoid) {
          return function (v) {
              return function (v1) {
                  if (v.value0 !== v1.value0 || v.value1 !== v1.value1) {
                      return Partial.crashWith()("Matrix::add >> tried to add matrices of different dimensions: " + ("\x0aM1 [r,c]: " + (Data_Show.show(Data_Show.showArray(Data_Show.showInt))([ v.value0, v.value1 ]) + ("\x0aM2 [r,c]: " + Data_Show.show(Data_Show.showArray(Data_Show.showInt))([ v1.value0, v1.value1 ])))));
                  };
                  if (Data_Boolean.otherwise) {
                      return Matrix.create(v.value0)(v.value1)(vadd(dictSemiring)(v.value2)(v1.value2));
                  };
                  throw new Error("Failed pattern match at Data.Matrix (line 214, column 1 - line 214, column 77): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var functorMatrix = {
      map: function (f) {
          return function (v) {
              return Matrix.create(v.value0)(v.value1)(Data_Functor.map(Data_Functor.functorArray)(f)(v.value2));
          };
      }
  };
  var column = function (c) {
      return function (v) {
          return Data_Array.mapMaybe(function (i) {
              return Data_Array.index(v.value2)((i * v.value1 | 0) + c | 0);
          })(Data_Array.range(0)(v.value0 - 1 | 0));
      };
  };
  var columns = function (mat) {
      return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(0)(ncols(mat) - 1 | 0))(function (i) {
          return Control_Applicative.pure(Control_Applicative.applicativeArray)(column(i)(mat));
      });
  };
  var mapply = function (dictMonoid) {
      return function (dictSemigroup) {
          return function (v) {
              return function (v1) {
                  if (v.value0 === v1.value0 && v.value1 === v1.value1) {
                      return Matrix.create(v.value0)(v.value1)(Data_Array.zipWith(Data_Function.apply)(v.value2)(v1.value2));
                  };
                  if (v1.value1 === v.value0) {
                      var apply$prime = function (colsM1) {
                          return function (rowsM2) {
                              return Control_Bind.bind(Control_Bind.bindArray)(colsM1)(function (c) {
                                  return Control_Bind.bind(Control_Bind.bindArray)(rowsM2)(function (r) {
                                      var zippedApplications = Data_Array.zipWith(Data_Function.apply)(c)(r);
                                      return Control_Applicative.pure(Control_Applicative.applicativeArray)(Data_Array.foldl(Data_Semigroup.append(dictMonoid.Semigroup0()))(Data_Monoid.mempty(dictMonoid))(zippedApplications));
                                  });
                              });
                          };
                      };
                      return Matrix.create(nrows(v1))(ncols(v))(apply$prime(columns(v))(rows(v1)));
                  };
                  if (Data_Boolean.otherwise) {
                      return Partial.crashWith()("Matrix::apply >> failed to apply matrices of different dimensions: ");
                  };
                  throw new Error("Failed pattern match at Data.Matrix (line 96, column 1 - line 96, column 89): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var multiply = function (dictMonoid) {
      return function (dictSemigroup) {
          return function (dictSemiring) {
              return function (m1) {
                  return function (m2) {
                      return mapply(dictMonoid)(dictMonoid.Semigroup0())(Data_Functor.map(functorMatrix)(Data_Semiring.mul(dictSemiring))(m2))(m1);
                  };
              };
          };
      };
  };
  exports["Matrix"] = Matrix;
  exports["madd"] = madd;
  exports["mapply"] = mapply;
  exports["multiply"] = multiply;
  exports["functorMatrix"] = functorMatrix;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Tuple.Nested"] = $PS["Data.Tuple.Nested"] || {};
  var exports = $PS["Data.Tuple.Nested"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var tuple3 = function (a) {
      return function (b) {
          return function (c) {
              return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, Data_Unit.unit)));
          };
      };
  };
  exports["tuple3"] = tuple3;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Brains.NeuralNetwork"] = $PS["Brains.NeuralNetwork"] || {};
  var exports = $PS["Brains.NeuralNetwork"];
  var ActivationFunction = $PS["ActivationFunction"];
  var Brains_Genome = $PS["Brains.Genome"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty = $PS["Data.Array.NonEmpty"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Matrix = $PS["Data.Matrix"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple_Nested = $PS["Data.Tuple.Nested"];                
  var Sum = function (x) {
      return x;
  };   
  var Neuron = (function () {
      function Neuron(value0) {
          this.value0 = value0;
      };
      Neuron.create = function (value0) {
          return new Neuron(value0);
      };
      return Neuron;
  })();
  var NN = (function () {
      function NN(value0) {
          this.value0 = value0;
      };
      NN.create = function (value0) {
          return new NN(value0);
      };
      return NN;
  })();
  var weightsMatrix = function (layer) {
      var weightsVectors = Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(function (v) {
          return Data_Functor.map(Data_Functor.functorArray)(Sum)(v.value0.weights);
      })(layer);
      var rows = Data_Array.length(Data_Array_NonEmpty.head(weightsVectors));
      var cols = Data_Array_NonEmpty.length(weightsVectors);
      return Data_Matrix.Matrix.create(rows)(cols)(Data_Array.concat(Data_Array_NonEmpty.toArray(weightsVectors)));
  };
  var toSumNum = function (v) {
      return function (v1) {
          return Sum(v(v1));
      };
  };
  var semiringSumNum = Data_Semiring.semiringNumber;
  var semigroupSumNum = {
      append: Data_Semiring.add(semiringSumNum)
  };
  var monoidSumNum = {
      mempty: 0.0,
      Semigroup0: function () {
          return semigroupSumNum;
      }
  };
  var fromGenome = function (g) {
      var hidden = Control_Bind.bind(Control_Bind.bindArray)(g)(function (l) {
          var n = function (v) {
              return new Neuron({
                  weights: v.value0.weights,
                  bias: v.value0.bias,
                  activationFn: Data_Maybe.fromJust()(Data_Array.index(ActivationFunction.activationFunctions)(v.value0.activationFn))
              });
          };
          return [ Data_Array_NonEmpty_Internal.NonEmptyArray(Data_Functor.map(Data_Functor.functorArray)(n)(l)) ];
      });
      return new NN({
          hidden: hidden,
          id: Brains_Genome.genome(g)
      });
  };
  var eqNN = {
      eq: function (v) {
          return function (v1) {
              return v.value0.id === v1.value0.id;
          };
      }
  };
  var biasVector = function (layer) {
      var v = Data_Array_NonEmpty.toArray(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(function (v1) {
          return v1.value0.bias;
      })(layer));
      return new Data_Matrix.Matrix(Data_Array.length(v), 1, v);
  };
  var activationVector = function (layer) {
      var v = Data_Array_NonEmpty.toArray(Data_Functor.map(Data_Array_NonEmpty_Internal.functorNonEmptyArray)(function (v1) {
          return v1.value0.activationFn;
      })(layer));
      return new Data_Matrix.Matrix(Data_Array.length(v), 1, v);
  };
  var run = function (v) {
      return function (input) {
          var tuples = Data_Functor.map(Data_Functor.functorArray)(function (l) {
              return Data_Tuple_Nested.tuple3(weightsMatrix(l))(Data_Functor.map(Data_Matrix.functorMatrix)(toSumNum)(activationVector(l)))(biasVector(l));
          })(v.value0.hidden);
          var step = function (i) {
              return function (v1) {
                  return Data_Matrix.mapply(monoidSumNum)(semigroupSumNum)(v1.value1.value0)(Data_Matrix.madd(semiringSumNum)(monoidSumNum)(Data_Matrix.multiply(monoidSumNum)(semigroupSumNum)(semiringSumNum)(v1.value0)(i))(v1.value1.value1.value0));
              };
          };
          var inputMatrix = new Data_Matrix.Matrix(Data_Array.length(input), 1, Data_Functor.map(Data_Functor.functorArray)(Sum)(input));
          var v1 = Data_Array.foldl(step)(inputMatrix)(tuples);
          return new Data_Maybe.Just(v1.value2);
      };
  };
  exports["Sum"] = Sum;
  exports["fromGenome"] = fromGenome;
  exports["run"] = run;
  exports["eqNN"] = eqNN;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $55 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($55) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = {
      succ: defaultSucc(charToEnum)($foreign.toCharCode),
      pred: defaultPred(charToEnum)($foreign.toCharCode),
      Ord0: function () {
          return Data_Ord.ordChar;
      }
  };
  var boundedEnumChar = {
      cardinality: $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0,
      toEnum: charToEnum,
      fromEnum: $foreign.toCharCode,
      Bounded0: function () {
          return Data_Bounded.boundedChar;
      },
      Enum1: function () {
          return enumChar;
      }
  };
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };

  exports.numDiv = function (n1) {
    return function (n2) {
      return n1 / n2;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var sub = function (dict) {
      return dict.sub;
  };
  var ringNumber = {
      sub: $foreign.numSub,
      Semiring0: function () {
          return Data_Semiring.semiringNumber;
      }
  };
  var ringInt = {
      sub: $foreign.intSub,
      Semiring0: function () {
          return Data_Semiring.semiringInt;
      }
  };
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
  exports["ringNumber"] = ringNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var commutativeRingNumber = {
      Ring0: function () {
          return Data_Ring.ringNumber;
      }
  };
  var commutativeRingInt = {
      Ring0: function () {
          return Data_Ring.ringInt;
      }
  };
  exports["commutativeRingInt"] = commutativeRingInt;
  exports["commutativeRingNumber"] = commutativeRingNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var mod = function (dict) {
      return dict.mod;
  };
  var euclideanRingNumber = {
      degree: function (v) {
          return 1;
      },
      div: $foreign.numDiv,
      mod: function (v) {
          return function (v1) {
              return 0.0;
          };
      },
      CommutativeRing0: function () {
          return Data_CommutativeRing.commutativeRingNumber;
      }
  };
  var euclideanRingInt = {
      degree: $foreign.intDegree,
      div: $foreign.intDiv,
      mod: $foreign.intMod,
      CommutativeRing0: function () {
          return Data_CommutativeRing.commutativeRingInt;
      }
  };
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
  exports["euclideanRingNumber"] = euclideanRingNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  exports["singleton"] = $foreign.singleton;
  exports["length"] = $foreign.length;
  exports["drop"] = $foreign.drop;
})(PS);
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };

  exports.char = function (s) {
    if (s.length === 1) return s.charAt(0);
    throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["char"] = $foreign["char"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var unfoldable1Array = {
      unfoldr1: $foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd)
  };
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = {
      unfoldr: $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd),
      Unfoldable10: function () {
          return Data_Unfoldable1.unfoldable1Array;
      }
  };
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  };
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  exports["length"] = length;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Color"] = $PS["Color"] || {};
  var exports = $PS["Color"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Int = $PS["Data.Int"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var $$Math = $PS["Math"];
  var HSLA = (function () {
      function HSLA(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      HSLA.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new HSLA(value0, value1, value2, value3);
                  };
              };
          };
      };
      return HSLA;
  })();
  var modPos = function (x) {
      return function (y) {
          return $$Math.remainder($$Math.remainder(x)(y) + y)(y);
      };
  };
  var rgba = function (red$prime) {
      return function (green$prime) {
          return function (blue$prime) {
              return function (alpha) {
                  var red = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(red$prime);
                  var r = Data_Int.toNumber(red) / 255.0;
                  var green = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(green$prime);
                  var g = Data_Int.toNumber(green) / 255.0;
                  var blue = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(blue$prime);
                  var maxChroma = Data_Ord.max(Data_Ord.ordInt)(Data_Ord.max(Data_Ord.ordInt)(red)(green))(blue);
                  var minChroma = Data_Ord.min(Data_Ord.ordInt)(Data_Ord.min(Data_Ord.ordInt)(red)(green))(blue);
                  var chroma = maxChroma - minChroma | 0;
                  var chroma$prime = Data_Int.toNumber(chroma) / 255.0;
                  var lightness = Data_Int.toNumber(maxChroma + minChroma | 0) / (255.0 * 2.0);
                  var saturation = (function () {
                      if (chroma === 0) {
                          return 0.0;
                      };
                      if (Data_Boolean.otherwise) {
                          return chroma$prime / (1.0 - $$Math.abs(2.0 * lightness - 1.0));
                      };
                      throw new Error("Failed pattern match at Color (line 157, column 5 - line 158, column 75): " + [  ]);
                  })();
                  var b = Data_Int.toNumber(blue) / 255.0;
                  var hue$prime = function (v) {
                      if (v === 0) {
                          return 0.0;
                      };
                      if (maxChroma === red) {
                          return modPos((g - b) / chroma$prime)(6.0);
                      };
                      if (maxChroma === green) {
                          return (b - r) / chroma$prime + 2.0;
                      };
                      if (Data_Boolean.otherwise) {
                          return (r - g) / chroma$prime + 4.0;
                      };
                      throw new Error("Failed pattern match at Color (line 148, column 5 - line 148, column 17): " + [ v.constructor.name ]);
                  };
                  var hue = 60.0 * hue$prime(chroma);
                  return new HSLA(hue, saturation, lightness, alpha);
              };
          };
      };
  };
  var rgb = function (r) {
      return function (g) {
          return function (b) {
              return rgba(r)(g)(b)(1.0);
          };
      };
  };
  var hsla = function (h) {
      return function (s) {
          return function (l) {
              return function (a) {
                  var s$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(s);
                  var l$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(l);
                  var a$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(a);
                  return new HSLA(h, s$prime, l$prime, a$prime);
              };
          };
      };
  };
  var hsl = function (h) {
      return function (s) {
          return function (l) {
              return hsla(h)(s)(l)(1.0);
          };
      };
  };                                   
  var clipHue = function (v) {
      var $65 = 360.0 === v;
      if ($65) {
          return v;
      };
      return modPos(v)(360.0);
  };
  var toRGBA$prime = function (v) {
      var h$prime = clipHue(v.value0) / 60.0;
      var chr = (1.0 - $$Math.abs(2.0 * v.value2 - 1.0)) * v.value1;
      var m = v.value2 - chr / 2.0;
      var x = chr * (1.0 - $$Math.abs($$Math.remainder(h$prime)(2.0) - 1.0));
      var col = (function () {
          if (h$prime < 1.0) {
              return {
                  r: chr,
                  g: x,
                  b: 0.0
              };
          };
          if (1.0 <= h$prime && h$prime < 2.0) {
              return {
                  r: x,
                  g: chr,
                  b: 0.0
              };
          };
          if (2.0 <= h$prime && h$prime < 3.0) {
              return {
                  r: 0.0,
                  g: chr,
                  b: x
              };
          };
          if (3.0 <= h$prime && h$prime < 4.0) {
              return {
                  r: 0.0,
                  g: x,
                  b: chr
              };
          };
          if (4.0 <= h$prime && h$prime < 5.0) {
              return {
                  r: x,
                  g: 0.0,
                  b: chr
              };
          };
          if (Data_Boolean.otherwise) {
              return {
                  r: chr,
                  g: 0.0,
                  b: x
              };
          };
          throw new Error("Failed pattern match at Color (line 342, column 5 - line 347, column 61): " + [  ]);
      })();
      return {
          r: col.r + m,
          g: col.g + m,
          b: col.b + m,
          a: v.value3
      };
  };
  var toRGBA = function (col) {
      var c = toRGBA$prime(col);
      var g = Data_Int.round(255.0 * c.g);
      var r = Data_Int.round(255.0 * c.r);
      var b = Data_Int.round(255.0 * c.b);
      return {
          r: r,
          g: g,
          b: b,
          a: c.a
      };
  };
  var eqColor = {
      eq: function (c1) {
          return function (c2) {
              var rgb2 = toRGBA(c2);
              var rgb1 = toRGBA(c1);
              return rgb1.r === rgb2.r && (rgb1.g === rgb2.g && (rgb1.b === rgb2.b && rgb1.a === rgb2.a));
          };
      }
  };
  var toHexString = function (color) {
      var toHex = function (num) {
          var repr = Data_Int.toStringAs(Data_Int.hexadecimal)(num);
          var $93 = Data_String_CodePoints.length(repr) === 1;
          if ($93) {
              return "0" + repr;
          };
          return repr;
      };
      var c = toRGBA(color);
      return "#" + (toHex(c.r) + (toHex(c.g) + toHex(c.b)));
  };
  var black = hsl(0.0)(0.0)(0.0);
  exports["rgb"] = rgb;
  exports["toHexString"] = toHexString;
  exports["black"] = black;
  exports["eqColor"] = eqColor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];
  var alt = function (dict) {
      return dict.alt;
  };
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Char"] = $PS["Data.Char"] || {};
  var exports = $PS["Data.Char"];
  var Data_Enum = $PS["Data.Enum"];                
  var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
  exports["toCharCode"] = toCharCode;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Maths"] = $PS["Data.Maths"] || {};
  var exports = $PS["Data.Maths"];
  var Data_Semiring = $PS["Data.Semiring"];
  var $$Math = $PS["Math"];                
  var toRads = Data_Semiring.mul(Data_Semiring.semiringNumber)($$Math.pi / 180.0);
  exports["toRads"] = toRads;
})(PS);
(function(exports) {
  "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  exports["split"] = $foreign.split;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Vector"] = $PS["Data.Vector"] || {};
  var exports = $PS["Data.Vector"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maths = $PS["Data.Maths"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var $$Math = $PS["Math"];
  var Partial = $PS["Partial"];
  var Type_Proxy = $PS["Type.Proxy"];                
  var Vec = function (x1) {
      return x1;
  };
  var x = function (dictSized) {
      return function (v) {
          return Data_Maybe.fromJust()(Data_Array.index(v)(0));
      };
  };
  var sized = function (dict) {
      return dict.sized;
  };
  var y = function (dictSized) {
      return function (v) {
          var v1 = sized(dictSized)(Type_Proxy["Proxy"].value);
          if (v1 >= 2) {
              return Data_Maybe.fromJust()(Data_Array.index(v)(1));
          };
          if (Data_Boolean.otherwise) {
              return Partial.crashWith()("Vector>>y: vector has no y component. Size is " + Data_Show.show(Data_Show.showInt)(v1));
          };
          throw new Error("Failed pattern match at Data.Vector (line 146, column 29 - line 148, column 94): " + [ v1.constructor.name ]);
      };
  };
  var s2 = {
      sized: function (v) {
          return 2;
      }
  };
  var rotate = function (angle) {
      return function (v) {
          var rads = Data_Maths.toRads(angle);
          var x$prime = x(s2)(v) * $$Math.cos(rads) - y(s2)(v) * $$Math.sin(rads);
          var y$prime = x(s2)(v) * $$Math.sin(rads) + y(s2)(v) * $$Math.cos(rads);
          return [ x$prime, y$prime ];
      };
  };
  var functorVec = {
      map: function (f) {
          return function (v) {
              return Vec(Data_Functor.map(Data_Functor.functorArray)(f)(v));
          };
      }
  };
  var scale = function (dictEuclideanRing) {
      var $66 = Data_Functor.map(functorVec);
      var $67 = Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0());
      return function ($68) {
          return $66($67($68));
      };
  };
  var foldableVector = {
      foldr: function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(b)(v);
              };
          };
      },
      foldl: function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(Data_Foldable.foldableArray)(f)(b)(v);
              };
          };
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return Data_Foldable.foldr(foldableVector)(function (b) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(b))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      }
  };
  var eqVec = function (dictEq) {
      return {
          eq: function (v) {
              return function (v1) {
                  return Data_Eq.eq(Data_Eq.eqArray(dictEq))(v)(v1);
              };
          }
      };
  };
  var applyVec = {
      apply: function (v) {
          return function (v1) {
              return Vec(Data_Array.zipWith(Data_Function.apply)(v)(v1));
          };
      },
      Functor0: function () {
          return functorVec;
      }
  };
  var vAdd = function (dictEuclideanRing) {
      return Control_Apply.lift2(applyVec)(Data_Semiring.add(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
  };
  var vSub = function (dictEuclideanRing) {
      return Control_Apply.lift2(applyVec)(Data_Ring.sub((dictEuclideanRing.CommutativeRing0()).Ring0()));
  };
  var distanceSquared = function (v1) {
      return function (v2) {
          return Data_Foldable.foldl(foldableVector)(Data_Semiring.add(Data_Semiring.semiringNumber))(0.0)(Data_Functor.map(functorVec)(function (e) {
              return e * e;
          })(vSub(Data_EuclideanRing.euclideanRingNumber)(v1)(v2)));
      };
  };
  var distance = function (v1) {
      return function (v2) {
          return $$Math.sqrt(distanceSquared(v1)(v2));
      };
  };
  exports["Vec"] = Vec;
  exports["vAdd"] = vAdd;
  exports["distance"] = distance;
  exports["scale"] = scale;
  exports["rotate"] = rotate;
  exports["x"] = x;
  exports["y"] = y;
  exports["s2"] = s2;
  exports["eqVec"] = eqVec;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify"] = modify;
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setFillStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.fillStyle = style;
          };
      };
  };

  exports.setStrokeStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.strokeStyle = style;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.radius, a.start, a.end);
          };
      };
  };

  exports.rect = function(ctx) {
      return function(r) {
          return function() {
              ctx.rect(r.x, r.y, r.width, r.height);
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  var Data_Maybe = $PS["Data.Maybe"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var fillPath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var a = path();
              $foreign.fill(ctx)();
              return a;
          };
      };
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["fillPath"] = fillPath;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["beginPath"] = $foreign.beginPath;
  exports["stroke"] = $foreign.stroke;
  exports["lineTo"] = $foreign.lineTo;
  exports["moveTo"] = $foreign.moveTo;
  exports["closePath"] = $foreign.closePath;
  exports["arc"] = $foreign.arc;
  exports["rect"] = $foreign.rect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Habitat"] = $PS["Habitat"] || {};
  var exports = $PS["Habitat"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];                
  var edges = Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (v) {
      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Ref.read(v.state)))(function (v1) {
          var top = {
              vector: [ 1.0, 0.0 ],
              point: [ 0.0, 0.0 ]
          };
          var bottom = {
              vector: [ 1.0, 0.0 ],
              point: [ 0.0, Data_Int.toNumber(v1.habitat.height) ]
          };
          var left = {
              vector: [ 0.0, 1.0 ],
              point: [ 0.0, 0.0 ]
          };
          var right = {
              vector: [ 0.0, 1.0 ],
              point: [ 0.0, Data_Int.toNumber(v1.habitat.width) ]
          };
          return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))({
              top: top,
              bottom: bottom,
              left: left,
              right: right
          });
      });
  });
  var hitEdge = function (v) {
      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (v1) {
          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Ref.read(v1.state)))(function (v2) {
              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(edges)(function (e) {
                  var a = (function () {
                      if (v.max.x >= Data_Int.toNumber(v2.habitat.width)) {
                          return new Data_Maybe.Just(e.right);
                      };
                      if (v.min.x <= 0.0) {
                          return new Data_Maybe.Just(e.left);
                      };
                      if (v.max.y >= Data_Int.toNumber(v2.habitat.height)) {
                          return new Data_Maybe.Just(e.bottom);
                      };
                      if (v.min.y <= 0.0) {
                          return new Data_Maybe.Just(e.top);
                      };
                      if (Data_Boolean.otherwise) {
                          return Data_Maybe.Nothing.value;
                      };
                      throw new Error("Failed pattern match at Habitat (line 57, column 9 - line 61, column 58): " + [  ]);
                  })();
                  return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(a);
              });
          });
      });
  };
  var draw = Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (v) {
      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Ref.read(v.state)))(function (v1) {
          return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(function __do() {
              Graphics_Canvas.setFillStyle(v.ctx)("#EDEDED")();
              return Graphics_Canvas.fillPath(v.ctx)(Graphics_Canvas.rect(v.ctx)({
                  x: 0.0,
                  y: 0.0,
                  width: Data_Int.toNumber(v1.habitat.width),
                  height: Data_Int.toNumber(v1.habitat.height)
              }))();
          });
      });
  });
  exports["draw"] = draw;
  exports["hitEdge"] = hitEdge;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Simulation.Types"] = $PS["Simulation.Types"] || {};
  var exports = $PS["Simulation.Types"];                                             
  var Init = (function () {
      function Init(value0) {
          this.value0 = value0;
      };
      Init.create = function (value0) {
          return new Init(value0);
      };
      return Init;
  })();
  var Playing = (function () {
      function Playing() {

      };
      Playing.value = new Playing();
      return Playing;
  })();
  var Paused = (function () {
      function Paused() {

      };
      Paused.value = new Paused();
      return Paused;
  })();
  var Completed = (function () {
      function Completed() {

      };
      Completed.value = new Completed();
      return Completed;
  })();
  var HitEdge = (function () {
      function HitEdge(value0) {
          this.value0 = value0;
      };
      HitEdge.create = function (value0) {
          return new HitEdge(value0);
      };
      return HitEdge;
  })();
  var Collided = (function () {
      function Collided(value0) {
          this.value0 = value0;
      };
      Collided.create = function (value0) {
          return new Collided(value0);
      };
      return Collided;
  })();
  var Move = (function () {
      function Move() {

      };
      Move.value = new Move();
      return Move;
  })();
  exports["Init"] = Init;
  exports["Playing"] = Playing;
  exports["Paused"] = Paused;
  exports["Completed"] = Completed;
  exports["HitEdge"] = HitEdge;
  exports["Collided"] = Collided;
  exports["Move"] = Move;
})(PS);
(function($PS) {
  "use strict";
  $PS["Creature"] = $PS["Creature"] || {};
  var exports = $PS["Creature"];
  var Brains_Genome = $PS["Brains.Genome"];
  var Brains_NeuralNetwork = $PS["Brains.NeuralNetwork"];
  var Color = $PS["Color"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Char = $PS["Data.Char"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maths = $PS["Data.Maths"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Vector = $PS["Data.Vector"];
  var Effect = $PS["Effect"];
  var Effect_Random = $PS["Effect.Random"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Habitat = $PS["Habitat"];
  var $$Math = $PS["Math"];
  var Simulation_Types = $PS["Simulation.Types"];                
  var rotate = function (angle) {
      return function (c) {
          var r = Data_Vector.rotate(angle);
          return {
              color: c.color,
              radius: c.radius,
              pos: c.pos,
              orientation: r(c.orientation),
              vision: {
                  left: r(c.vision.left),
                  right: r(c.vision.right)
              },
              speed: c.speed,
              brain: c.brain,
              genome: c.genome,
              debug: c.debug,
              hover: c.hover
          };
      };
  };
  var move = function (c) {
      var factor = Data_Int.toNumber(c.speed);
      return {
          color: c.color,
          radius: c.radius,
          pos: Data_Vector.vAdd(Data_EuclideanRing.euclideanRingNumber)(c.pos)(Data_Vector.scale(Data_EuclideanRing.euclideanRingNumber)(factor)(c.orientation)),
          orientation: c.orientation,
          vision: c.vision,
          speed: c.speed,
          brain: c.brain,
          genome: c.genome,
          debug: c.debug,
          hover: c.hover
      };
  };
  var drawLine = function (color) {
      return function (p1) {
          return function (p2) {
              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (v) {
                  return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(function __do() {
                      Graphics_Canvas.beginPath(v.ctx)();
                      Graphics_Canvas.setStrokeStyle(v.ctx)(color)();
                      Graphics_Canvas.moveTo(v.ctx)(Data_Vector.x(Data_Vector.s2)(p1))(Data_Vector.y(Data_Vector.s2)(p1))();
                      Graphics_Canvas.lineTo(v.ctx)(Data_Vector.x(Data_Vector.s2)(p2))(Data_Vector.y(Data_Vector.s2)(p2))();
                      Graphics_Canvas.closePath(v.ctx)();
                      return Graphics_Canvas.stroke(v.ctx)();
                  });
              });
          };
      };
  };
  var draw = function (v) {
      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (v1) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))((function () {
              var $19 = v.debug || v.hover;
              if ($19) {
                  var tip = Data_Vector.vAdd(Data_EuclideanRing.euclideanRingNumber)(Data_Vector.scale(Data_EuclideanRing.euclideanRingNumber)(v.radius * 20.0)(v.orientation))(v.pos);
                  var left = Data_Vector.vAdd(Data_EuclideanRing.euclideanRingNumber)(Data_Vector.scale(Data_EuclideanRing.euclideanRingNumber)(v.radius * 10.0)(v.vision.left))(v.pos);
                  var right = Data_Vector.vAdd(Data_EuclideanRing.euclideanRingNumber)(Data_Vector.scale(Data_EuclideanRing.euclideanRingNumber)(v.radius * 10.0)(v.vision.right))(v.pos);
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(drawLine("red")(v.pos)(tip))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(drawLine("blue")(v.pos)(left))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(drawLine("blue")(v.pos)(right))(function () {
                              return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(function __do() {
                                  Graphics_Canvas.setFillStyle(v1.ctx)("black")();
                                  return Graphics_Canvas.fillPath(v1.ctx)(Graphics_Canvas.arc(v1.ctx)({
                                      x: Data_Vector.x(Data_Vector.s2)(v.pos),
                                      y: Data_Vector.y(Data_Vector.s2)(v.pos),
                                      radius: v.radius + 5.0,
                                      start: 0.0,
                                      end: 2.0 * $$Math.pi
                                  }))();
                              });
                          });
                      });
                  });
              };
              return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Unit.unit);
          })())(function () {
              return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(function __do() {
                  Graphics_Canvas.setFillStyle(v1.ctx)(Color.toHexString(v.color))();
                  return Graphics_Canvas.fillPath(v1.ctx)(Graphics_Canvas.arc(v1.ctx)({
                      x: Data_Vector.x(Data_Vector.s2)(v.pos),
                      y: Data_Vector.y(Data_Vector.s2)(v.pos),
                      radius: v.radius,
                      start: 0.0,
                      end: 2.0 * $$Math.pi
                  }))();
              });
          });
      });
  };
  var dispatch = function (v) {
      return function (c) {
          if (v instanceof Simulation_Types.Move) {
              return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(move(c));
          };
          if (v instanceof Simulation_Types.HitEdge) {
              return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(c);
          };
          if (v instanceof Simulation_Types.Collided) {
              return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(move(c));
          };
          throw new Error("Failed pattern match at Creature (line 175, column 1 - line 175, column 47): " + [ v.constructor.name, c.constructor.name ]);
      };
  };

  // | from https://gist.github.com/0x263b/2bdd90886c2036a1ad5bcf06d6e6fb37
  // |
  var colorFromString = function (g) {
      if (Data_String_CodePoints.length(g) === 0) {
          return Color.black;
      };
      if (Data_Boolean.otherwise) {
          var code = function ($48) {
              return Data_Char.toCharCode(Data_String_Unsafe["char"]($48));
          };
          var arr = Data_String_Common.split("")(g);
        
          // | shift left 5 = multiply by 32 but restricting to a 32 bit number. .&. (AND) to ensure the 32 bits
  var _hash = function (h) {
              return function (c) {
                  var _h = c + ((h << 5) - h | 0) | 0;
                  return _h & _h;
              };
          };
          var hash = Data_Array.foldl(_hash)(0)(Data_Functor.map(Data_Functor.functorArray)(code)(arr));
          var generateColorComponent = function (i) {
              return hash >> (i * 8 | 0) & 255;
          };
          return Color.rgb(generateColorComponent(0))(generateColorComponent(1))(generateColorComponent(2));
      };
      throw new Error("Failed pattern match at Creature (line 50, column 1 - line 50, column 35): " + [ g.constructor.name ]);
  };
  var create = function (g) {
      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (v) {
          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Ref.read(v.state)))(function (v1) {
              var speedE = Effect_Random.randomInt(1)(2);
              var radiusE = Data_Functor.map(Effect.functorEffect)(Data_Int.toNumber)(Effect_Random.randomInt(5)(10));
              var posE = function __do() {
                  var r = radiusE();
                  var x = Effect_Random.randomRange(r)(Data_Int.toNumber(v1.habitat.width) - r)();
                  var y = Effect_Random.randomRange(r)(Data_Int.toNumber(v1.habitat.height) - r)();
                  return Data_Vector.Vec([ x, y ]);
              };
              var orientationE = function __do() {
                  var x = Effect_Random.randomRange(0.0)(1.0)();
                  var y = 1.0 - x;
                  return [ x, y ];
              };
              return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(function __do() {
                  var radius = radiusE();
                  var speed = speedE();
                  var pos = posE();
                  var orientation = orientationE();
                  var color = colorFromString(Brains_Genome.genome(g));
                  var brain = Brains_NeuralNetwork.fromGenome(g);
                  var vision = {
                      left: Data_Vector.rotate(-30.0)(orientation),
                      right: Data_Vector.rotate(30.0)(orientation)
                  };
                  return {
                      color: color,
                      radius: radius,
                      orientation: orientation,
                      speed: speed,
                      pos: pos,
                      vision: vision,
                      brain: brain,
                      genome: g,
                      debug: false,
                      hover: false
                  };
              });
          });
      });
  };
  var collided = function (c1) {
      return function (c2) {
          return Data_Vector.distance(c1.pos)(c2.pos) <= c1.radius + c2.radius;
      };
  };
  var boundingBox = function (c) {
      return {
          min: {
              x: Data_Vector.x(Data_Vector.s2)(c.pos) - c.radius,
              y: Data_Vector.y(Data_Vector.s2)(c.pos) - c.radius
          },
          max: {
              x: Data_Vector.x(Data_Vector.s2)(c.pos) + c.radius,
              y: Data_Vector.y(Data_Vector.s2)(c.pos) + c.radius
          }
      };
  };
  var intersects = function (v) {
      return function (c) {
          var bounds = boundingBox(c);
          return v.x >= bounds.min.x - 5.0 && (v.x <= bounds.max.x + 5.0 && (v.y >= bounds.min.y - 5.0 && v.y <= bounds.max.y + 5.0));
      };
  };
  var nextAction = function (c) {
      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (v) {
          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Ref.read(v.state)))(function (v1) {
              var bb = boundingBox(c);
              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Habitat.hitEdge(bb))(function (me) {
                  var mc = Data_Functor.map(Data_Maybe.functorMaybe)(Simulation_Types.Collided.create)(Data_Array.find(collided(c))(Data_Array["delete"](Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                      reflectSymbol: function () {
                          return "vision";
                      }
                  })(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()({
                      reflectSymbol: function () {
                          return "right";
                      }
                  })(Data_Vector.eqVec(Data_Eq.eqNumber)))()({
                      reflectSymbol: function () {
                          return "left";
                      }
                  })(Data_Vector.eqVec(Data_Eq.eqNumber)))))()({
                      reflectSymbol: function () {
                          return "speed";
                      }
                  })(Data_Eq.eqInt))()({
                      reflectSymbol: function () {
                          return "radius";
                      }
                  })(Data_Eq.eqNumber))()({
                      reflectSymbol: function () {
                          return "pos";
                      }
                  })(Data_Vector.eqVec(Data_Eq.eqNumber)))()({
                      reflectSymbol: function () {
                          return "orientation";
                      }
                  })(Data_Vector.eqVec(Data_Eq.eqNumber)))()({
                      reflectSymbol: function () {
                          return "hover";
                      }
                  })(Data_Eq.eqBoolean))()({
                      reflectSymbol: function () {
                          return "genome";
                      }
                  })(Data_Eq.eqArray(Data_Eq.eqArray(Brains_Genome.eqGene))))()({
                      reflectSymbol: function () {
                          return "debug";
                      }
                  })(Data_Eq.eqBoolean))()({
                      reflectSymbol: function () {
                          return "color";
                      }
                  })(Color.eqColor))()({
                      reflectSymbol: function () {
                          return "brain";
                      }
                  })(Brains_NeuralNetwork.eqNN)))(c)(v1.creatures)));
                  return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Maybe.fromMaybe(Simulation_Types.Move.value)(Control_Alt.alt(Data_Maybe.altMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Simulation_Types.HitEdge.create)(me))(mc)));
              });
          });
      });
  };
  var update = function (c) {
      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(nextAction(c))(function (a) {
          var input = [ Data_Vector.x(Data_Vector.s2)(c.pos), Data_Vector.y(Data_Vector.s2)(c.pos), Data_Vector.x(Data_Vector.s2)(c.orientation), Data_Vector.y(Data_Vector.s2)(c.orientation), Data_Int.toNumber(c.speed) ];
          var out = Data_Array.take(2)(Data_Maybe.fromMaybe(Data_Functor.map(Data_Functor.functorArray)(Brains_NeuralNetwork.Sum)(input))(Brains_NeuralNetwork.run(c.brain)(input)));
          var r = Data_Maths.toRads(out[0]);
          return dispatch(a)({
              color: c.color,
              radius: c.radius,
              pos: c.pos,
              orientation: [ $$Math.cos(r), $$Math.sin(r) ],
              vision: c.vision,
              speed: Data_Ord.min(Data_Ord.ordInt)(Data_Int.floor(out[1]))(4),
              brain: c.brain,
              genome: c.genome,
              debug: c.debug,
              hover: c.hover
          });
      });
  };
  exports["create"] = create;
  exports["draw"] = draw;
  exports["intersects"] = intersects;
  exports["update"] = update;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Brains.NEAT"] = $PS["Brains.NEAT"] || {};
  var exports = $PS["Brains.NEAT"];
  var ActivationFunction = $PS["ActivationFunction"];
  var Brains_Genome = $PS["Brains.Genome"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Creature = $PS["Creature"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect = $PS["Effect"];
  var Effect_Random = $PS["Effect.Random"];
  var Effect_Ref = $PS["Effect.Ref"];
  var FFI_NanoID = $PS["FFI.NanoID"];                
  var Weight = (function () {
      function Weight() {

      };
      Weight.value = new Weight();
      return Weight;
  })();
  var Bias = (function () {
      function Bias() {

      };
      Bias.value = new Bias();
      return Bias;
  })();
  var Activation = (function () {
      function Activation() {

      };
      Activation.value = new Activation();
      return Activation;
  })();
  var modify = function (v) {
      return function (v1) {
          if (v instanceof Weight) {
              return function __do() {
                  var w = Effect_Random.random();
                  var wi = Effect_Random.randomInt(0)(Data_Array.length(v1.value0.weights) - 1 | 0)();
                  return new Brains_Genome.Gene({
                      weights: Data_Maybe.fromJust()(Data_Array.updateAt(wi)(w)(v1.value0.weights)),
                      bias: v1.value0.bias,
                      activationFn: v1.value0.activationFn,
                      disabled: v1.value0.disabled,
                      id: v1.value0.id
                  });
              };
          };
          if (v instanceof Bias) {
              return function __do() {
                  var b = Effect_Random.random();
                  return new Brains_Genome.Gene({
                      weights: v1.value0.weights,
                      bias: b,
                      activationFn: v1.value0.activationFn,
                      disabled: v1.value0.disabled,
                      id: v1.value0.id
                  });
              };
          };
          if (v instanceof Activation) {
              return function __do() {
                  var a = Effect_Random.randomInt(0)(Data_Array.length(ActivationFunction.activationFunctions) - 1 | 0)();
                  return new Brains_Genome.Gene({
                      weights: v1.value0.weights,
                      bias: v1.value0.bias,
                      activationFn: a,
                      disabled: v1.value0.disabled,
                      id: v1.value0.id
                  });
              };
          };
          throw new Error("Failed pattern match at Brains.NEAT (line 52, column 1 - line 52, column 42): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var fromNum = function (n) {
      if (n > 0.85) {
          return Activation.value;
      };
      if (n > 0.5) {
          return Bias.value;
      };
      if (Data_Boolean.otherwise) {
          return Weight.value;
      };
      throw new Error("Failed pattern match at Brains.NEAT (line 45, column 1 - line 45, column 30): " + [ n.constructor.name ]);
  };
  var mutate = function (g) {
      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (v) {
          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Ref.read(v.state)))(function (v1) {
              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Random.random))(function (r) {
                  var $22 = r < v1.mutationRate;
                  if ($22) {
                      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Data_Functor.map(Effect.functorEffect)(fromNum)(Effect_Random.random)))(function (m) {
                          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Random.randomInt(0)(v1.brainSize.layers - 1 | 0)))(function (li) {
                              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Random.randomInt(0)(v1.brainSize.neurons - 1 | 0)))(function (ni) {
                                  return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(FFI_NanoID.customAlphabet(Brains_Genome.geneAlphabet)(Brains_Genome.geneIdLength)))(function (_id) {
                                      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(modify(m)(g[li][ni])))(function (v2) {
                                          var newGene = {
                                              id: _id,
                                              activationFn: v2.value0.activationFn,
                                              bias: v2.value0.bias,
                                              disabled: v2.value0.disabled,
                                              weights: v2.value0.weights
                                          };
                                          return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Maybe.fromJust()(Data_Array.updateAt(li)(Data_Maybe.fromJust()(Data_Array.updateAt(ni)(new Brains_Genome.Gene(newGene))(g[li])))(g)));
                                      });
                                  });
                              });
                          });
                      });
                  };
                  return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(g);
              });
          });
      });
  };
  var crossover = function (mom) {
      return function (dad) {
          var randompick = function (g1) {
              return function (g2) {
                  return function __do() {
                      var r = Effect_Random.random();
                      var $28 = r >= 0.5;
                      if ($28) {
                          return g1;
                      };
                      return g2;
                  };
              };
          };
          var mergeLayers = function (l1) {
              return function (l2) {
                  return Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Data_Array.zipWith(randompick)(l1)(l2));
              };
          };
          return Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Data_Array.zipWith(mergeLayers)(mom)(dad));
      };
  };
  var evolve = function (fn) {
      return function (cutoff) {
          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (v) {
              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Ref.read(v.state)))(function (v1) {
                  var percentageIndexFor = function (x) {
                      return function (l) {
                          return Data_Int.floor(x * Data_Int.toNumber(Data_Array.length(l)));
                      };
                  };
                  var fit = Data_Array.sortWith(Data_Ord.ordNumber)(fn)(Data_Array.filter(cutoff)(v1.creatures));
                  var elitism = percentageIndexFor(0.1)(fit);
                  var v2 = Data_Array.splitAt(elitism)(fit);
                  var genomes = Data_Functor.map(Data_Functor.functorArray)(function (c) {
                      return c.genome;
                  })(v2.after);
                  return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Data_Array.zipWithA(Effect.applicativeEffect)(crossover)(genomes)(Data_Array.reverse(genomes))))(function (offspring) {
                      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(mutate)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(offspring)(offspring)))(function (mutated) {
                          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Creature.create)(mutated))(function (newGeneration) {
                              return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Array.take(Data_Array.length(v1.creatures))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v2.before)(newGeneration)));
                          });
                      });
                  });
              });
          });
      };
  };
  exports["evolve"] = evolve;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";          

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];                                   
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS);
(function(exports) {
  "use strict";

  // Alias require to prevent webpack or browserify from actually requiring.
  var req = typeof module === "undefined" ? undefined : module.require;
  var util = (function() {
    try {
      return req === undefined ? undefined : req("util");
    } catch(e) {
      return undefined;
    }
  })();

  exports._spy = function (tag, x) {
    if (util !== undefined) {
      console.log(tag + ":", util.inspect(x, { depth: null, colors: true }));
    } else {
      console.log(tag + ":", x);
    }
    return x;
  };
})(PS["Debug"] = PS["Debug"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Debug"] = $PS["Debug"] || {};
  var exports = $PS["Debug"];
  var $foreign = $PS["Debug"];
  var spy = function (dictDebugWarning) {
      return function (tag) {
          return function (a) {
              return $foreign["_spy"](tag, a);
          };
      };
  };
  exports["spy"] = spy;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
  exports["error"] = $foreign.error;
})(PS);
(function(exports) {
  /* no-redeclare global exports */
  "use strict";

  exports.setTimeout = function (ms) {
    return function (fn) {
      return function () {
        return setTimeout(fn, ms);
      };
    };
  };
})(PS["Effect.Timer"] = PS["Effect.Timer"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Effect.Timer"] = $PS["Effect.Timer"] || {};
  var exports = $PS["Effect.Timer"];
  var $foreign = $PS["Effect.Timer"];
  exports["setTimeout"] = $foreign.setTimeout;
})(PS);
(function(exports) {
  "use strict";

  exports.setAttribute = function (name) {
    return function (value) {
      return function (element) {
        return function () {
          element.setAttribute(name, value);
        };
      };
    };
  };
})(PS["Web.DOM.Element"] = PS["Web.DOM.Element"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.DOM.Element"] = $PS["Web.DOM.Element"] || {};
  var exports = $PS["Web.DOM.Element"];
  var $foreign = $PS["Web.DOM.Element"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toEventTarget"] = toEventTarget;
  exports["setAttribute"] = $foreign.setAttribute;
})(PS);
(function(exports) {
  "use strict";                                               

  exports._querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
})(PS["Web.DOM.ParentNode"] = PS["Web.DOM.ParentNode"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.DOM.ParentNode"] = $PS["Web.DOM.ParentNode"] || {};
  var exports = $PS["Web.DOM.ParentNode"];
  var $foreign = $PS["Web.DOM.ParentNode"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var querySelector = function (qs) {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $1 = $foreign["_querySelector"](qs);
      return function ($2) {
          return $0($1($2));
      };
  };
  exports["querySelector"] = querySelector;
})(PS);
(function(exports) {
  "use strict";

  exports._target = function (e) {
    return e.target;
  };

  exports.type_ = function (e) {
    return e.type;
  };
})(PS["Web.Event.Event"] = PS["Web.Event.Event"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.Event.Event"] = $PS["Web.Event.Event"] || {};
  var exports = $PS["Web.Event.Event"];
  var $foreign = $PS["Web.Event.Event"];
  var Data_Nullable = $PS["Data.Nullable"];
  var target = function ($1) {
      return Data_Nullable.toMaybe($foreign["_target"]($1));
  };
  exports["target"] = target;
  exports["type_"] = $foreign.type_;
})(PS);
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
})(PS);
(function(exports) {
  "use strict";

  exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
    if (typeof window !== "undefined") {
      var ty = window[name];
      if (ty != null && value instanceof ty) {
        return just(value);
      }
    }
    var obj = value;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name) {
        return just(value);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  };
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.Internal.FFI"] = $PS["Web.Internal.FFI"] || {};
  var exports = $PS["Web.Internal.FFI"];
  var $foreign = $PS["Web.Internal.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var unsafeReadProtoTagged = function (name) {
      return function (value) {
          return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
      };
  };
  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.HTMLCanvasElement"] = $PS["Web.HTML.HTMLCanvasElement"] || {};
  var exports = $PS["Web.HTML.HTMLCanvasElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;                                   
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
  exports["fromEventTarget"] = fromEventTarget;
  exports["toHTMLElement"] = toHTMLElement;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                      
  var toParentNode = Unsafe_Coerce.unsafeCoerce; 
  var toDocument = Unsafe_Coerce.unsafeCoerce;
  exports["toDocument"] = toDocument;
  exports["toParentNode"] = toParentNode;
})(PS);
(function(exports) {
  "use strict";

  exports.offsetTop = function (el) {
    return function () {
      return el.offsetTop;
    };
  };

  exports.offsetLeft = function (el) {
    return function () {
      return el.offsetLeft;
    };
  };
})(PS["Web.HTML.HTMLElement"] = PS["Web.HTML.HTMLElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var $foreign = $PS["Web.HTML.HTMLElement"];
  exports["offsetTop"] = $foreign.offsetTop;
  exports["offsetLeft"] = $foreign.offsetLeft;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };

  exports.requestAnimationFrame = function(fn) {
    return function(window) {
      return function() {
        return window.requestAnimationFrame(fn);
      };
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  exports["document"] = $foreign.document;
  exports["requestAnimationFrame"] = $foreign.requestAnimationFrame;
})(PS);
(function(exports) {
  "use strict";

  exports.clientX = function (e) {
    return e.clientX;
  };

  exports.clientY = function (e) {
    return e.clientY;
  };
})(PS["Web.UIEvent.MouseEvent"] = PS["Web.UIEvent.MouseEvent"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.UIEvent.MouseEvent"] = $PS["Web.UIEvent.MouseEvent"] || {};
  var exports = $PS["Web.UIEvent.MouseEvent"];
  var $foreign = $PS["Web.UIEvent.MouseEvent"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                        
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("MouseEvent");
  exports["fromEvent"] = fromEvent;
  exports["clientX"] = $foreign.clientX;
  exports["clientY"] = $foreign.clientY;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Simulation"] = $PS["Simulation"] || {};
  var exports = $PS["Simulation"];
  var Brains_Genome = $PS["Brains.Genome"];
  var Brains_NEAT = $PS["Brains.NEAT"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Creature = $PS["Creature"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Vector = $PS["Data.Vector"];
  var Debug = $PS["Debug"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Effect_Timer = $PS["Effect.Timer"];
  var Habitat = $PS["Habitat"];
  var Simulation_Types = $PS["Simulation.Types"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var Web_DOM_ParentNode = $PS["Web.DOM.ParentNode"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML_HTMLCanvasElement = $PS["Web.HTML.HTMLCanvasElement"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var Web_UIEvent_MouseEvent = $PS["Web.UIEvent.MouseEvent"];                
  var spawn = function (v) {
      return function (n) {
          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Data_Array.replicate(n)(Brains_Genome.network(v.layers)(v.neurons)))))(function (genomes) {
              return Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Functor.map(Data_Functor.functorArray)(Creature.create)(genomes));
          });
      };
  };
  var fitness = function (habitat) {
      return function (c) {
          var p = Data_Vector.x(Data_Vector.s2)(c.pos);
          return Data_Ord.min(Data_Ord.ordNumber)(p)(Data_Int.toNumber(habitat.width) - p);
      };
  };
  var cutoff = function (habitat) {
      return function (c) {
          if (Data_Vector.x(Data_Vector.s2)(c.pos) > Data_Int.toNumber(habitat.width) * 0.8) {
              return true;
          };
          if (Data_Vector.x(Data_Vector.s2)(c.pos) < Data_Int.toNumber(habitat.width) * 0.2) {
              return true;
          };
          if (Data_Boolean.otherwise) {
              return false;
          };
          throw new Error("Failed pattern match at Simulation (line 173, column 1 - line 173, column 47): " + [ habitat.constructor.name, c.constructor.name ]);
      };
  };
  var step = function (dictPartial) {
      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (v) {
          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Ref.read(v.state)))(function (v1) {
              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Functor.map(Data_Functor.functorArray)(Creature.update)(v1.creatures)))(function (updated) {
                  return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Ref.modify(function (v2) {
                      return {
                          creatures: updated,
                          brainSize: v2.brainSize,
                          closeUp: v2.closeUp,
                          habitat: v2.habitat,
                          mutationRate: v2.mutationRate,
                          selected: v2.selected,
                          simulation: v2.simulation
                      };
                  })(v.state)))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Habitat.draw)(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Data_Foldable.sequence_(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(Creature.draw)(updated)))(function () {
                              return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Web_HTML_Window.requestAnimationFrame(Control_Monad_Reader_Trans.runReaderT(Data_Functor["void"](Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(loop()))(v))(v.window));
                          });
                      });
                  });
              });
          });
      });
  };
  var loop = function (dictPartial) {
      var updateCanvas = function (w) {
          return function (conf) {
              return function __do() {
                  var doc = Web_HTML_Window.document(w)();
                  var canvas = Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromJust())(Web_DOM_ParentNode.querySelector("#board")(Web_HTML_HTMLDocument.toParentNode(doc)))();
                  Web_DOM_Element.setAttribute("width")(Data_Show.show(Data_Show.showInt)(conf.habitat.width))(canvas)();
                  return Web_DOM_Element.setAttribute("height")(Data_Show.show(Data_Show.showInt)(conf.habitat.height))(canvas)();
              };
          };
      };
      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (v) {
          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Ref.read(v.state)))(function (v1) {
              if (v1.simulation instanceof Simulation_Types.Paused) {
                  return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Web_HTML_Window.requestAnimationFrame(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(v.window));
              };
              if (v1.simulation instanceof Simulation_Types.Init) {
                  return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(spawn(v1.brainSize)(v1.simulation.value0.population))(function ($$new) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(updateCanvas(v.window)(v1.simulation.value0)))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Ref.modify_(function (v2) {
                              var $39 = {};
                              for (var $40 in v2) {
                                  if ({}.hasOwnProperty.call(v2, $40)) {
                                      $39[$40] = v2[$40];
                                  };
                              };
                              $39.creatures = $$new;
                              $39.selected = [  ];
                              $39.closeUp = Data_Maybe.Nothing.value;
                              $39.habitat = v1.simulation.value0.habitat;
                              $39.simulation = Simulation_Types.Playing.value;
                              return $39;
                          })(v.state)))(function () {
                              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Timer.setTimeout(5000)(Effect_Ref.modify_(function (v2) {
                                  var $42 = {};
                                  for (var $43 in v2) {
                                      if ({}.hasOwnProperty.call(v2, $43)) {
                                          $42[$43] = v2[$43];
                                      };
                                  };
                                  $42.simulation = Simulation_Types.Completed.value;
                                  return $42;
                              })(v.state))))(step);
                          });
                      });
                  });
              };
              if (v1.simulation instanceof Simulation_Types.Playing) {
                  return step();
              };
              if (v1.simulation instanceof Simulation_Types.Completed) {
                  return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Brains_NEAT.evolve(fitness(v1.habitat))(cutoff(v1.habitat)))(function (nextGen) {
                      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Ref.modify_(function (v2) {
                          var $46 = {};
                          for (var $47 in v2) {
                              if ({}.hasOwnProperty.call(v2, $47)) {
                                  $46[$47] = v2[$47];
                              };
                          };
                          $46.creatures = nextGen;
                          $46.simulation = Simulation_Types.Completed.value;
                          return $46;
                      })(v.state)))(function () {
                          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Timer.setTimeout(5000)(Effect_Ref.modify_(function (v2) {
                              var $49 = {};
                              for (var $50 in v2) {
                                  if ({}.hasOwnProperty.call(v2, $50)) {
                                      $49[$50] = v2[$50];
                                  };
                              };
                              $49.simulation = Simulation_Types.Completed.value;
                              return $49;
                          })(v.state))))(function () {
                              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Ref.modify_(function (v2) {
                                  var $52 = {};
                                  for (var $53 in v2) {
                                      if ({}.hasOwnProperty.call(v2, $53)) {
                                          $52[$53] = v2[$53];
                                      };
                                  };
                                  $52.simulation = Simulation_Types.Playing.value;
                                  return $52;
                              })(v.state)))(step);
                          });
                      });
                  });
              };
              throw new Error("Failed pattern match at Simulation (line 136, column 5 - line 152, column 13): " + [ v1.simulation.constructor.name ]);
          });
      });
  };
  var coordinates = function (evt) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(Web_UIEvent_MouseEvent.fromEvent(evt))(function (e) {
          var x = Data_Int.toNumber(Web_UIEvent_MouseEvent.clientX(e));
          var y = Data_Int.toNumber(Web_UIEvent_MouseEvent.clientY(e));
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Web_HTML_HTMLCanvasElement.toHTMLElement)(Control_Bind.bind(Data_Maybe.bindMaybe)(Web_Event_Event.target(evt))(Web_HTML_HTMLCanvasElement.fromEventTarget)))(function (l) {
              var topE = Web_HTML_HTMLElement.offsetTop(l);
              var leftE = Web_HTML_HTMLElement.offsetLeft(l);
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(function __do() {
                  var left = leftE();
                  var top = topE();
                  return {
                      x: x - left,
                      y: y - top
                  };
              });
          });
      });
  };
  var handleMouseEvents = (function () {
      var handleEventFor = function (state) {
          return function (e) {
              return function (p) {
                  return function (creatures) {
                      var hit = Creature.intersects(p);
                      var toggleDebug = function (c) {
                          var $60 = hit(c);
                          if ($60) {
                              return {
                                  debug: true,
                                  brain: c.brain,
                                  color: c.color,
                                  genome: c.genome,
                                  hover: c.hover,
                                  orientation: c.orientation,
                                  pos: c.pos,
                                  radius: c.radius,
                                  speed: c.speed,
                                  vision: c.vision
                              };
                          };
                          return {
                              debug: false,
                              brain: c.brain,
                              color: c.color,
                              genome: c.genome,
                              hover: c.hover,
                              orientation: c.orientation,
                              pos: c.pos,
                              radius: c.radius,
                              speed: c.speed,
                              vision: c.vision
                          };
                      };
                      var updated = Data_Functor.map(Data_Functor.functorArray)(toggleDebug)(creatures);
                      var selected = Data_Array.filter(function (c) {
                          return c.debug;
                      })(updated);
                      var toggleHover = function (c) {
                          var $61 = hit(c);
                          if ($61) {
                              return {
                                  hover: true,
                                  brain: c.brain,
                                  color: c.color,
                                  debug: c.debug,
                                  genome: c.genome,
                                  orientation: c.orientation,
                                  pos: c.pos,
                                  radius: c.radius,
                                  speed: c.speed,
                                  vision: c.vision
                              };
                          };
                          return {
                              hover: false,
                              brain: c.brain,
                              color: c.color,
                              debug: c.debug,
                              genome: c.genome,
                              orientation: c.orientation,
                              pos: c.pos,
                              radius: c.radius,
                              speed: c.speed,
                              vision: c.vision
                          };
                      };
                      var v = Web_Event_Event.type_(e);
                      if (v === "click") {
                          return Effect_Ref.modify_(function (v1) {
                              return {
                                  creatures: updated,
                                  selected: Debug.spy()("Selected")(selected),
                                  closeUp: Debug.spy()("closeup")(Data_Array.index(selected)(0)),
                                  brainSize: v1.brainSize,
                                  habitat: v1.habitat,
                                  mutationRate: v1.mutationRate,
                                  simulation: v1.simulation
                              };
                          })(state);
                      };
                      if (v === "mousemove") {
                          return Effect_Ref.modify_(function (v1) {
                              return {
                                  creatures: Data_Functor.map(Data_Functor.functorArray)(toggleHover)(creatures),
                                  brainSize: v1.brainSize,
                                  closeUp: v1.closeUp,
                                  habitat: v1.habitat,
                                  mutationRate: v1.mutationRate,
                                  selected: v1.selected,
                                  simulation: v1.simulation
                              };
                          })(state);
                      };
                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                  };
              };
          };
      };
      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (v) {
          return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Web_Event_EventTarget.eventListener(function (e) {
              return function __do() {
                  var v1 = Effect_Ref.read(v.state)();
                  var mp = Data_Traversable.sequence(Data_Traversable.traversableMaybe)(Effect.applicativeEffect)(coordinates(e))();
                  if (mp instanceof Data_Maybe.Nothing) {
                      return Effect_Console.error("Could not calculate coordinates for mouse event")();
                  };
                  if (mp instanceof Data_Maybe.Just) {
                      return handleEventFor(v.state)(e)(mp.value0)(v1.creatures)();
                  };
                  throw new Error("Failed pattern match at Simulation (line 82, column 7 - line 84, column 53): " + [ mp.constructor.name ]);
              };
          }));
      });
  })();
  exports["handleMouseEvents"] = handleMouseEvents;
  exports["loop"] = loop;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Simulation.Closeup"] = $PS["Simulation.Closeup"] || {};
  var exports = $PS["Simulation.Closeup"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Creature = $PS["Creature"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var dimensions = {
      width: 200.0,
      height: 200.0
  };
  var draw = Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (v) {
      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Effect_Ref.read(v.state)))(function (v1) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(function __do() {
              Graphics_Canvas.setFillStyle(v.ctx)("#EDEDED")();
              return Graphics_Canvas.fillPath(v.ctx)(Graphics_Canvas.rect(v.ctx)({
                  x: 0.0,
                  y: 0.0,
                  width: dimensions.width,
                  height: dimensions.height
              }))();
          }))(function () {
              var scaled = function (c) {
                  return {
                      radius: c.radius * 5.0,
                      pos: [ 100.0, 100.0 ],
                      brain: c.brain,
                      color: c.color,
                      debug: c.debug,
                      genome: c.genome,
                      hover: c.hover,
                      orientation: c.orientation,
                      speed: c.speed,
                      vision: c.vision
                  };
              };
              return Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Unit.unit))(function ($11) {
                  return Creature.draw(scaled($11));
              })(v1.closeUp);
          });
      });
  });
  var step = Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (v) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(draw)(function () {
          return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Web_HTML_Window.requestAnimationFrame(Control_Monad_Reader_Trans.runReaderT(Data_Functor["void"](Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(step))(v))(v.window));
      });
  });
  exports["step"] = step;
})(PS);
(function(exports) {
  "use strict";

  // ----------------------------------------------------------------------------

  exports.value = function (input) {
    return function () {
      return input.value;
    };
  };
})(PS["Web.HTML.HTMLInputElement"] = PS["Web.HTML.HTMLInputElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.HTMLInputElement"] = $PS["Web.HTML.HTMLInputElement"] || {};
  var exports = $PS["Web.HTML.HTMLInputElement"];
  var $foreign = $PS["Web.HTML.HTMLInputElement"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                                  
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
  exports["fromElement"] = fromElement;
  exports["value"] = $foreign.value;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Simulation.UI"] = $PS["Simulation.UI"] || {};
  var exports = $PS["Simulation.UI"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Debug = $PS["Debug"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Simulation_Types = $PS["Simulation.Types"];
  var Web_DOM_ParentNode = $PS["Web.DOM.ParentNode"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLInputElement = $PS["Web.HTML.HTMLInputElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var Reset = (function () {
      function Reset() {

      };
      Reset.value = new Reset();
      return Reset;
  })();
  var Pause = (function () {
      function Pause() {

      };
      Pause.value = new Pause();
      return Pause;
  })();
  var Play = (function () {
      function Play() {

      };
      Play.value = new Play();
      return Play;
  })();
  var handleBtnClick = function (msg) {
      var handler = function (v) {
          return function (s) {
              return function (v1) {
                  return function (v2) {
                      if (v instanceof Play) {
                          return Effect_Ref.modify_(function (v3) {
                              var $12 = {};
                              for (var $13 in v3) {
                                  if ({}.hasOwnProperty.call(v3, $13)) {
                                      $12[$13] = v3[$13];
                                  };
                              };
                              $12.simulation = Simulation_Types.Playing.value;
                              return $12;
                          })(s);
                      };
                      if (v instanceof Pause) {
                          return Effect_Ref.modify_(function (v3) {
                              var $15 = {};
                              for (var $16 in v3) {
                                  if ({}.hasOwnProperty.call(v3, $16)) {
                                      $15[$16] = v3[$16];
                                  };
                              };
                              $15.simulation = Simulation_Types.Paused.value;
                              return $15;
                          })(s);
                      };
                      if (v instanceof Reset) {
                          return function __do() {
                              var doc = Web_HTML_Window.document(v1)();
                              var wInput = Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromJust())(Web_DOM_ParentNode.querySelector("input[name=width]")(Web_HTML_HTMLDocument.toParentNode(doc)))();
                              var hInput = Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromJust())(Web_DOM_ParentNode.querySelector("input[name=height]")(Web_HTML_HTMLDocument.toParentNode(doc)))();
                              var cInput = Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromJust())(Web_DOM_ParentNode.querySelector("input[name=creatures]")(Web_HTML_HTMLDocument.toParentNode(doc)))();
                              var width = Data_Functor.map(Effect.functorEffect)((function () {
                                  var $24 = Data_Maybe.fromJust();
                                  return function ($25) {
                                      return $24(Data_Int.fromString($25));
                                  };
                              })())(Web_HTML_HTMLInputElement.value(Data_Maybe.fromJust()(Web_HTML_HTMLInputElement.fromElement(wInput))))();
                              var height = Data_Functor.map(Effect.functorEffect)((function () {
                                  var $26 = Data_Maybe.fromJust();
                                  return function ($27) {
                                      return $26(Data_Int.fromString($27));
                                  };
                              })())(Web_HTML_HTMLInputElement.value(Data_Maybe.fromJust()(Web_HTML_HTMLInputElement.fromElement(hInput))))();
                              var n = Data_Functor.map(Effect.functorEffect)((function () {
                                  var $28 = Data_Maybe.fromJust();
                                  return function ($29) {
                                      return $28(Data_Int.fromString($29));
                                  };
                              })())(Web_HTML_HTMLInputElement.value(Data_Maybe.fromJust()(Web_HTML_HTMLInputElement.fromElement(cInput))))();
                              return Effect_Ref.modify_(function (v3) {
                                  var $18 = {};
                                  for (var $19 in v3) {
                                      if ({}.hasOwnProperty.call(v3, $19)) {
                                          $18[$19] = v3[$19];
                                      };
                                  };
                                  $18.simulation = new Simulation_Types.Init({
                                      population: Debug.spy()("New creatures:")(n),
                                      habitat: Debug.spy()("New habitat: ")({
                                          width: width,
                                          height: height
                                      })
                                  });
                                  return $18;
                              })(s)();
                          };
                      };
                      throw new Error("Failed pattern match at Simulation.UI (line 24, column 5 - line 24, column 67): " + [ v.constructor.name, s.constructor.name, v1.constructor.name, v2.constructor.name ]);
                  };
              };
          };
      };
      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (v) {
          return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(Effect.monadEffect)(Web_Event_EventTarget.eventListener(handler(msg)(v.state)(v.window)));
      });
  };
  exports["Reset"] = Reset;
  exports["Pause"] = Pause;
  exports["handleBtnClick"] = handleBtnClick;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.DOM.Document"] = $PS["Web.DOM.Document"] || {};
  var exports = $PS["Web.DOM.Document"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];     
  var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
  exports["toNonElementParentNode"] = toNonElementParentNode;
})(PS);
(function(exports) {
  "use strict";

  exports._getElementById = function (id) {
    return function (node) {
      return function () {
        return node.getElementById(id);
      };
    };
  };
})(PS["Web.DOM.NonElementParentNode"] = PS["Web.DOM.NonElementParentNode"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.DOM.NonElementParentNode"] = $PS["Web.DOM.NonElementParentNode"] || {};
  var exports = $PS["Web.DOM.NonElementParentNode"];
  var $foreign = $PS["Web.DOM.NonElementParentNode"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];                
  var getElementById = function (eid) {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $1 = $foreign["_getElementById"](eid);
      return function ($2) {
          return $0($1($2));
      };
  };
  exports["getElementById"] = getElementById;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.HTML.Event.EventTypes"] = $PS["Web.HTML.Event.EventTypes"] || {};
  var exports = $PS["Web.HTML.Event.EventTypes"];
  var click = "click";
  exports["click"] = click;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Web.UIEvent.MouseEvent.EventTypes"] = $PS["Web.UIEvent.MouseEvent.EventTypes"] || {};
  var exports = $PS["Web.UIEvent.MouseEvent.EventTypes"];
  var mousemove = "mousemove";
  exports["mousemove"] = mousemove;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.4
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Simulation = $PS["Simulation"];
  var Simulation_Closeup = $PS["Simulation.Closeup"];
  var Simulation_Types = $PS["Simulation.Types"];
  var Simulation_UI = $PS["Simulation.UI"];
  var Web_DOM_Document = $PS["Web.DOM.Document"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var Web_DOM_NonElementParentNode = $PS["Web.DOM.NonElementParentNode"];
  var Web_DOM_ParentNode = $PS["Web.DOM.ParentNode"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Event_EventTypes = $PS["Web.HTML.Event.EventTypes"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLInputElement = $PS["Web.HTML.HTMLInputElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var Web_UIEvent_MouseEvent_EventTypes = $PS["Web.UIEvent.MouseEvent.EventTypes"];                
  var main = function __do() {
      Effect_Console.log("Booting up!")();
      var w = Web_HTML.window();
      var doc = Web_HTML_Window.document(w)();
      var mainCanvas = Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromJust())(Graphics_Canvas.getCanvasElementById("board"))();
      var closeUpCanvas = Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromJust())(Graphics_Canvas.getCanvasElementById("closeup"))();
      var mainCanvasEl = Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromJust())(Web_DOM_NonElementParentNode.getElementById("board")(Web_DOM_Document.toNonElementParentNode(Web_HTML_HTMLDocument.toDocument(doc))))();
      var ctx = Graphics_Canvas.getContext2D(mainCanvas)();
      var wInput = Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromJust())(Web_DOM_ParentNode.querySelector("input[name=width]")(Web_HTML_HTMLDocument.toParentNode(doc)))();
      var hInput = Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromJust())(Web_DOM_ParentNode.querySelector("input[name=height]")(Web_HTML_HTMLDocument.toParentNode(doc)))();
      var cInput = Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromJust())(Web_DOM_ParentNode.querySelector("input[name=creatures]")(Web_HTML_HTMLDocument.toParentNode(doc)))();
      var resetBtn = Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromJust())(Web_DOM_ParentNode.querySelector("#config button[name=reset]")(Web_HTML_HTMLDocument.toParentNode(doc)))();
      var pauseBtn = Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromJust())(Web_DOM_ParentNode.querySelector("#config button[name=pause]")(Web_HTML_HTMLDocument.toParentNode(doc)))();
      var playBtn = Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromJust())(Web_DOM_ParentNode.querySelector("#config button[name=play]")(Web_HTML_HTMLDocument.toParentNode(doc)))();
      var width = Data_Functor.map(Effect.functorEffect)((function () {
          var $3 = Data_Maybe.fromJust();
          return function ($4) {
              return $3(Data_Int.fromString($4));
          };
      })())(Web_HTML_HTMLInputElement.value(Data_Maybe.fromJust()(Web_HTML_HTMLInputElement.fromElement(wInput))))();
      var height = Data_Functor.map(Effect.functorEffect)((function () {
          var $5 = Data_Maybe.fromJust();
          return function ($6) {
              return $5(Data_Int.fromString($6));
          };
      })())(Web_HTML_HTMLInputElement.value(Data_Maybe.fromJust()(Web_HTML_HTMLInputElement.fromElement(hInput))))();
      var n = Data_Functor.map(Effect.functorEffect)((function () {
          var $7 = Data_Maybe.fromJust();
          return function ($8) {
              return $7(Data_Int.fromString($8));
          };
      })())(Web_HTML_HTMLInputElement.value(Data_Maybe.fromJust()(Web_HTML_HTMLInputElement.fromElement(cInput))))();
      var dummy = Web_HTML_Window.requestAnimationFrame(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(w)();
      var state = Effect_Ref["new"]({
          creatures: [  ],
          selected: [  ],
          closeUp: Data_Maybe.Nothing.value,
          habitat: {
              width: width,
              height: height
          },
          simulation: new Simulation_Types.Init({
              population: n,
              habitat: {
                  width: width,
                  height: height
              }
          }),
          brainSize: {
              layers: 2,
              neurons: 5
          },
          mutationRate: 0.25
      })();
      var env = {
          state: state,
          ctx: ctx,
          window: w,
          frameId: dummy
      };
      var target = Web_DOM_Element.toEventTarget(mainCanvasEl);
      var handler = Control_Monad_Reader_Trans.runReaderT(Simulation.handleMouseEvents)(env)();
      Web_Event_EventTarget.addEventListener(Web_HTML_Event_EventTypes.click)(handler)(true)(target)();
      Web_Event_EventTarget.addEventListener(Web_UIEvent_MouseEvent_EventTypes.mousemove)(handler)(true)(target)();
      var eff = function __do() {
          var closeUpCtx = Graphics_Canvas.getContext2D(closeUpCanvas)();
          var v = Control_Monad_Reader_Trans.runReaderT(Simulation_Closeup.step)({
              state: env.state,
              ctx: closeUpCtx,
              window: env.window,
              frameId: env.frameId
          })();
          return Control_Monad_Reader_Trans.runReaderT(Simulation.loop())(env)();
      };
      Data_Functor["void"](Effect.functorEffect)(Web_HTML_Window.requestAnimationFrame(Data_Functor["void"](Effect.functorEffect)(eff))(w))();
      var resetTarget = Web_DOM_Element.toEventTarget(resetBtn);
      var resetHandler = Control_Monad_Reader_Trans.runReaderT(Simulation_UI.handleBtnClick(Simulation_UI.Reset.value))(env)();
      var pauseTarget = Web_DOM_Element.toEventTarget(pauseBtn);
      var pauseHandler = Control_Monad_Reader_Trans.runReaderT(Simulation_UI.handleBtnClick(Simulation_UI.Pause.value))(env)();
      var playTarget = Web_DOM_Element.toEventTarget(playBtn);
      var playHandler = Control_Monad_Reader_Trans.runReaderT(Simulation_UI.handleBtnClick(Simulation_UI.Pause.value))(env)();
      Web_Event_EventTarget.addEventListener(Web_HTML_Event_EventTypes.click)(resetHandler)(true)(resetTarget)();
      Web_Event_EventTarget.addEventListener(Web_HTML_Event_EventTypes.click)(pauseHandler)(true)(pauseTarget)();
      return Web_Event_EventTarget.addEventListener(Web_HTML_Event_EventTypes.click)(playHandler)(true)(playTarget)();
  };
  exports["main"] = main;
})(PS);
PS["Main"].main();
//# sourceMappingURL=index.js.map
